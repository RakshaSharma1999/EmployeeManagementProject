//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EmployeeManagementProject
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class EmployeeDataBaseEntities : DbContext
    {
        public EmployeeDataBaseEntities()
            : base("name=EmployeeDataBaseEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<BankDetail> BankDetails { get; set; }
        public virtual DbSet<BloodGroup> BloodGroups { get; set; }
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<ContactDetail> ContactDetails { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<DepartmentMaster> DepartmentMasters { get; set; }
        public virtual DbSet<LeaveStatusMaster> LeaveStatusMasters { get; set; }
        public virtual DbSet<LoginTable> LoginTables { get; set; }
        public virtual DbSet<PersonalDetail> PersonalDetails { get; set; }
        public virtual DbSet<RoleMaster> RoleMasters { get; set; }
        public virtual DbSet<StateMaster> StateMasters { get; set; }
        public virtual DbSet<Attendance> Attendances { get; set; }
        public virtual DbSet<ProjectStatusTable> ProjectStatusTables { get; set; }
        public virtual DbSet<ProjectTable> ProjectTables { get; set; }
        public virtual DbSet<TaskTable> TaskTables { get; set; }
        public virtual DbSet<SalaryTable> SalaryTables { get; set; }
        public virtual DbSet<LeaveTable> LeaveTables { get; set; }
    
        public virtual ObjectResult<JustCheck_Result> JustCheck()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<JustCheck_Result>("JustCheck");
        }
    
        public virtual ObjectResult<string> SPCreateVerifyCode(Nullable<int> empId, string firstName, string lastName, Nullable<System.DateTime> dOB)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SPCreateVerifyCode", empIdParameter, firstNameParameter, lastNameParameter, dOBParameter);
        }
    }
}
